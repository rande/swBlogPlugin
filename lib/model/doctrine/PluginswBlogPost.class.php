<?php
/*
 * This file is part of the swBlogPlugin package.
 *
 * (c) 2010 Thomas Rabaix <thomas.rabaix@soleoweb.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */


/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginswBlogPost extends BaseswBlogPost
{

  public function getUrl($name)
  {
    $date = strtotime($this->getCreatedAt());
    $year = date('Y', $date);
    $month = date('m', $date);
    $day = date('d', $date);
    $slug = $this->getSlug();
    
    switch($name) 
    {
      case 'sw_blog_view_post':
        return '@sw_blog_view_post?year='.$year.'&month='.$month.'&slug='.$slug.'&day='.$day;
    }
  }
  
  public function getCreatedAt($format = null)
  {
    $created_at = $this->_get('created_at', is_bool($format) ? $format : null);
    
    if(is_string($format))
    {
      $created_at = date($format, strtotime($created_at));
    }
    
    return $created_at;
  }

  public function isCommentable()
  {

    if(!$this->comment_is_enabled)
    {
      
      return false;
    }

    if(!is_null($this->comment_close_at) &&  strtotime($this->comment_close_at) < strtotime('now'))
    {

      return false;
    }
    
    return true;
  }
  
  public static function getFormatsList()
  {
    return array(
      'html'      => __('type_html', null, 'swPagesAdmin'),
      'richhtml'  => __('type_richhtml', null, 'swPagesAdmin'),
      //'textile'   => __('type_textile', null, 'swPagesAdmin'), 
      'markdown'  => __('type_markdown', null, 'swPagesAdmin'),
    );
  }
  
  public function updateFormat()
  {
    

    foreach($this->Translation as $lang => $values)
    {
      switch($this->getFormatContent())
      {
        
        case 'markdown':
          $this->Translation[$lang]['content'] = swBlogMarkdownRendered::convertToHtml($values['raw_content']);
          break;
//        case 'textile':
//          $this->Translation[$lang] = swPageMarkdownRendered::convertToHtml($values['raw_content']);
//          break;
        case 'richhtml':
        case 'html':
        default:
          $this->Translation[$lang]['content'] = $values['raw_content'];
          break;
      }
    }
  }
  
  public function preSave($event)
  {
    
    $this->updateFormat();
    
    foreach($this->Translation as $translation)
    {
      $translation->slug = swToolbox::buildUrl($translation->title);
    }
    
  }
}